/*
**
** The JavaScript code is generated by atscc2js
** The starting compilation time is: 2016-12-13: 12h:24m
**
*/

/* ATSextcode_beg() */
//
var theCounter = 0
var theCounter2 = 0
//
/* ATSextcode_end() */

var theClicks2_baconjs_statmp4

var theClicks2_baconjs_statmp5

var theClicks2_baconjs_statmp7

var theClicks2_baconjs_statmp8

var theClicks2_baconjs_statmp10

var theClicks2_baconjs_statmp11

var theClicks2_baconjs_statmp12

var theClicks2_baconjs_statmp13

var theClicks2_baconjs_statmp15

var theClicks2_baconjs_statmp16

var theClicks2_baconjs_statmp18

var theClicks2_baconjs_statmp19

var theClicks2_baconjs_statmp21

var theClicks2_baconjs_statmp22

var theClicks2_baconjs_statmp47

var theClicks2_baconjs_statmp48

var theClicks2_baconjs_statmp50

var theClicks2_baconjs_statmp51

var theClicks2_baconjs_statmp52

var theClicks2_baconjs_statmp53

var theClicks2_baconjs_statmp55

var theClicks2_baconjs_statmp56

var theClicks2_baconjs_statmp57

var theClicks2_baconjs_statmp58

var theClicks2_baconjs_statmp59

var theClicks2_baconjs_statmp60

var theClicks2_baconjs_statmp62

var theClicks2_baconjs_statmp63

var theClicks2_baconjs_statmp69

function
theClicks2_baconjs_patsfun_2__closurerize()
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_2(arg0); }];
}


function
theClicks2_baconjs_patsfun_3__closurerize()
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_3(arg0); }];
}


function
theClicks2_baconjs_patsfun_4__closurerize()
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_4(arg0); }];
}


function
theClicks2_baconjs_patsfun_5__closurerize()
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_5(arg0); }];
}


function
theClicks2_baconjs_patsfun_6__closurerize()
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_6(arg0); }];
}


function
theClicks2_baconjs_patsfun_7__closurerize()
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_7(arg0); }];
}


function
theClicks2_baconjs_patsfun_9__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return theClicks2_baconjs_patsfun_9(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
theClicks2_baconjs_patsfun_10__closurerize()
{
  return [function(cenv, arg0, arg1) { return theClicks2_baconjs_patsfun_10(arg0, arg1); }];
}


function
theClicks2_baconjs_patsfun_11__closurerize()
{
  return [function(cenv, arg0, arg1) { return theClicks2_baconjs_patsfun_11(arg0, arg1); }];
}


function
theClicks2_baconjs_patsfun_12__closurerize()
{
  return [function(cenv, arg0, arg1) { return theClicks2_baconjs_patsfun_12(arg0, arg1); }];
}


function
theClicks2_baconjs_patsfun_13__closurerize()
{
  return [function(cenv, arg0, arg1) { return theClicks2_baconjs_patsfun_13(arg0, arg1); }];
}


function
theClicks2_baconjs_patsfun_14__closurerize()
{
  return [function(cenv, arg0, arg1) { return theClicks2_baconjs_patsfun_14(arg0, arg1); }];
}


function
theClicks2_baconjs_patsfun_15__closurerize()
{
  return [function(cenv, arg0, arg1) { return theClicks2_baconjs_patsfun_15(arg0, arg1); }];
}


function
theClicks2_baconjs_dbl2int_0(arg0)
{
//
// knd = 0
  var tmpret0
  var tmp1
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_dbl2int_0
  tmp1 = ats2jspre_lt_double_double(arg0, 0.5);
  if(tmp1) {
    tmpret0 = 0;
  } else {
    tmpret0 = 1;
  } // endif
  return tmpret0;
} // end-of-function


function
theClicks2_baconjs_int2bool_1(arg0)
{
//
// knd = 0
  var tmpret2
  var tmp3
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_int2bool_1
  tmp3 = ats2jspre_eq_int0_int0(arg0, 1);
  if(tmp3) {
    tmpret2 = true;
  } else {
    tmpret2 = false;
  } // endif
  return tmpret2;
} // end-of-function


function
theClicks2_baconjs_patsfun_2(arg0)
{
//
// knd = 0
  var tmpret6
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_2
  tmpret6 = 0;
  return tmpret6;
} // end-of-function


function
theClicks2_baconjs_patsfun_3(arg0)
{
//
// knd = 0
  var tmpret9
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_3
  tmpret9 = 1;
  return tmpret9;
} // end-of-function


function
theClicks2_baconjs_patsfun_4(arg0)
{
//
// knd = 0
  var tmpret14
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_4
  tmpret14 = 2;
  return tmpret14;
} // end-of-function


function
theClicks2_baconjs_patsfun_5(arg0)
{
//
// knd = 0
  var tmpret17
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_5
  tmpret17 = 4;
  return tmpret17;
} // end-of-function


function
theClicks2_baconjs_patsfun_6(arg0)
{
//
// knd = 0
  var tmpret20
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_6
  tmpret20 = 3;
  return tmpret20;
} // end-of-function


function
theClicks2_baconjs_patsfun_7(arg0)
{
//
// knd = 0
  var tmpret23
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_7
  tmpret23 = 0;
  return tmpret23;
} // end-of-function


function
theClicks2_baconjs_initStreams_8(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp25
  var tmp26
  var tmp27
  var tmp28
  var tmp29
  var tmp30
  var tmp31
  var tmp33
  var tmp45
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_theClicks2_baconjs_initStreams_8
    tmp25 = ats2jspre_eq_int0_int0(arg0, size);
    if(tmp25) {
      // ATSINSmove_void
    } else {
      tmp26 = ats2jspre_eq_int0_int0(arg1, size);
      if(tmp26) {
        tmp27 = ats2jspre_add_int0_int0(arg0, 1);
        // ATStailcalseq_beg
        apy0 = tmp27;
        apy1 = 0;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_theClicks2_baconjs_initStreams_8
        // ATStailcalseq_end
      } else {
        tmp28 = ats2jspre_String(arg0);
        tmp29 = ats2jspre_String(arg1);
        tmp30 = getStream(arg0, arg1);
        tmp31 = ats2js_bacon_EStream_map(tmp30, theClicks2_baconjs_patsfun_9__closurerize(arg0, arg1));
        tmp33 = ats2js_bacon_EStream_scan(tmp31, 0, theClicks2_baconjs_patsfun_10__closurerize());
        streams.push(tmp33);
        tmp45 = ats2jspre_add_int0_int0(arg1, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = tmp45;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_theClicks2_baconjs_initStreams_8
        // ATStailcalseq_end
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
theClicks2_baconjs_patsfun_9(env0, env1, arg0)
{
//
// knd = 0
  var tmpret32
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_9
  tmpret32 = [env0, env1];
  return tmpret32;
} // end-of-function


function
theClicks2_baconjs_patsfun_10(arg0, arg1)
{
//
// knd = 0
  var tmpret34
  var tmp35
  var tmp36
  var tmp37
  var tmp38
  var tmp39
  var tmp41
  var tmp42
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_10
  tmp35 = arg1[0];
  tmp36 = arg1[1];
  tmp37 = getSelectedTemplate();
  tmp39 = ats2jspre_eq_string_string(tmp37, "default");
  if(tmp39) {
    tmp38 = true;
  } else {
    tmp38 = ats2jspre_eq_string_string(tmp37, "");
  } // endif
  if(tmp38) {
    flipCell(tmp35, tmp36);
    tmpret34 = ats2jspre_add_int0_int0(arg0, 1);
  } else {
    tmp41 = getTemplateRowCount(tmp37);
    tmp42 = getTemplateColCount(tmp37);
    applyTemplate(tmp37, tmp41, tmp42, tmp35, tmp36);
    tmpret34 = ats2jspre_add_int0_int0(arg0, 1);
  } // endif
  return tmpret34;
} // end-of-function


function
theClicks2_baconjs_patsfun_11(arg0, arg1)
{
//
// knd = 0
  var tmpret49
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_11
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab0
      if(!ATSCKpat_con0(arg1, 1)) { tmplab_js = 3; break; }
      case 2: // __atstmplab1
      tmpret49 = false;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab2
      tmpret49 = true;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret49;
} // end-of-function


function
theClicks2_baconjs_patsfun_12(arg0, arg1)
{
//
// knd = 0
  var tmpret54
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_12
  if(arg0) {
    tmpret54 = 2;
  } else {
    tmpret54 = arg1;
  } // endif
  return tmpret54;
} // end-of-function


function
theClicks2_baconjs_patsfun_13(arg0, arg1)
{
//
// knd = 0
  var tmpret61
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_13
  if(arg1) {
    tmpret61 = arg0;
  } else {
    tmpret61 = 2;
  } // endif
  return tmpret61;
} // end-of-function


function
theClicks2_baconjs_patsfun_14(arg0, arg1)
{
//
// knd = 0
  var tmpret64
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_14
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab3
      if(!ATSCKpat_con0(arg1, 0)) { tmplab_js = 3; break; }
      case 2: // __atstmplab4
      updateAllGrid();
      update_steps(0);
      tmpret64 = ats2jspre_add_int0_int0(arg0, 1);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab5
      if(!ATSCKpat_con0(arg1, 1)) { tmplab_js = 5; break; }
      case 4: // __atstmplab6
      tmpret64 = arg0;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab7
      if(!ATSCKpat_con0(arg1, 2)) { tmplab_js = 7; break; }
      case 6: // __atstmplab8
      tmpret64 = arg0;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab9
      if(!ATSCKpat_con0(arg1, 3)) { tmplab_js = 9; break; }
      case 8: // __atstmplab10
      random_grid(0, 0);
      tmpret64 = arg0;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 9: // __atstmplab11
      case 10: // __atstmplab12
      logic_build();
      tmpret64 = arg0;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret64;
} // end-of-function


function
theClicks2_baconjs_patsfun_15(arg0, arg1)
{
//
// knd = 0
  var tmpret70
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_patsfun_15
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab13
      case 2: // __atstmplab14
      reset_grid(0, 0);
      update_steps(1);
      tmpret70 = 0;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret70;
} // end-of-function


function
theClicks2_baconjs_fix_index_16(arg0)
{
//
// knd = 0
  var tmpret73
  var tmp74
  var tmp75
  var tmp76
  var tmp77
  var tmp78
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_fix_index_16
  tmp74 = mycheckbox();
  if(tmp74) {
    tmp75 = ats2jspre_gte_int0_int0(arg0, size);
    if(tmp75) {
      tmpret73 = 0;
    } else {
      tmp76 = ats2jspre_lt_int0_int0(arg0, 0);
      if(tmp76) {
        tmpret73 = ats2jspre_sub_int0_int0(size, 1);
      } else {
        tmpret73 = arg0;
      } // endif
    } // endif
  } else {
    tmp77 = ats2jspre_gte_int0_int0(arg0, size);
    if(tmp77) {
      tmpret73 = ats2jspre_neg_int1(1);
    } else {
      tmp78 = ats2jspre_lt_int0_int0(arg0, 0);
      if(tmp78) {
        tmpret73 = ats2jspre_neg_int1(1);
      } else {
        tmpret73 = arg0;
      } // endif
    } // endif
  } // endif
  return tmpret73;
} // end-of-function


function
theClicks2_baconjs_updateGrid_17(arg0, arg1)
{
//
// knd = 0
  var tmp80
  var tmp81
  var tmp82
  var tmp83
  var tmp84
  var tmp85
  var tmp86
  var tmp87
  var tmp88
  var tmp89
  var tmp90
  var tmp91
  var tmp92
  var tmp93
  var tmp94
  var tmp95
  var tmp96
  var tmp97
  var tmp98
  var tmp99
  var tmp100
  var tmp101
  var tmp102
  var tmp103
  var tmp104
  var tmp105
  var tmp106
  var tmp107
  var tmp108
  var tmp109
  var tmp110
  var tmp111
  var tmp112
  var tmp113
  var tmp114
  var tmp115
  var tmp116
  var tmp117
  var tmp118
  var tmp119
  var tmp120
  var tmp121
  var tmp122
  var tmp123
  var tmp124
  var tmp125
  var tmp126
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_updateGrid_17
  tmp80 = getCell_copy(arg0, arg1);
  tmp82 = theClicks2_baconjs_fix_index_16(arg0);
  tmp84 = ats2jspre_sub_int0_int0(arg1, 1);
  tmp83 = theClicks2_baconjs_fix_index_16(tmp84);
  tmp81 = getCell_copy(tmp82, tmp83);
  tmp86 = theClicks2_baconjs_fix_index_16(arg0);
  tmp88 = ats2jspre_add_int0_int0(arg1, 1);
  tmp87 = theClicks2_baconjs_fix_index_16(tmp88);
  tmp85 = getCell_copy(tmp86, tmp87);
  tmp91 = ats2jspre_sub_int0_int0(arg0, 1);
  tmp90 = theClicks2_baconjs_fix_index_16(tmp91);
  tmp92 = theClicks2_baconjs_fix_index_16(arg1);
  tmp89 = getCell_copy(tmp90, tmp92);
  tmp95 = ats2jspre_add_int0_int0(arg0, 1);
  tmp94 = theClicks2_baconjs_fix_index_16(tmp95);
  tmp96 = theClicks2_baconjs_fix_index_16(arg1);
  tmp93 = getCell_copy(tmp94, tmp96);
  tmp99 = ats2jspre_sub_int0_int0(arg0, 1);
  tmp98 = theClicks2_baconjs_fix_index_16(tmp99);
  tmp101 = ats2jspre_sub_int0_int0(arg1, 1);
  tmp100 = theClicks2_baconjs_fix_index_16(tmp101);
  tmp97 = getCell_copy(tmp98, tmp100);
  tmp104 = ats2jspre_sub_int0_int0(arg0, 1);
  tmp103 = theClicks2_baconjs_fix_index_16(tmp104);
  tmp106 = ats2jspre_add_int0_int0(arg1, 1);
  tmp105 = theClicks2_baconjs_fix_index_16(tmp106);
  tmp102 = getCell_copy(tmp103, tmp105);
  tmp109 = ats2jspre_add_int0_int0(arg0, 1);
  tmp108 = theClicks2_baconjs_fix_index_16(tmp109);
  tmp111 = ats2jspre_sub_int0_int0(arg1, 1);
  tmp110 = theClicks2_baconjs_fix_index_16(tmp111);
  tmp107 = getCell_copy(tmp108, tmp110);
  tmp114 = ats2jspre_add_int0_int0(arg0, 1);
  tmp113 = theClicks2_baconjs_fix_index_16(tmp114);
  tmp116 = ats2jspre_add_int0_int0(arg1, 1);
  tmp115 = theClicks2_baconjs_fix_index_16(tmp116);
  tmp112 = getCell_copy(tmp113, tmp115);
  tmp119 = ats2jspre_add_int0_int0(tmp81, tmp85);
  tmp118 = ats2jspre_add_int0_int0(tmp119, tmp89);
  tmp117 = ats2jspre_add_int0_int0(tmp118, tmp93);
  tmp123 = ats2jspre_add_int0_int0(tmp117, tmp97);
  tmp122 = ats2jspre_add_int0_int0(tmp123, tmp102);
  tmp121 = ats2jspre_add_int0_int0(tmp122, tmp107);
  tmp120 = ats2jspre_add_int0_int0(tmp121, tmp112);
  tmp126 = ats2jspre_eq_int0_int0(tmp120, 2);
  if(tmp126) {
    tmp125 = ats2jspre_eq_int0_int0(tmp80, 1);
  } else {
    tmp125 = false;
  } // endif
  if(tmp125) {
    tmp124 = true;
  } else {
    tmp124 = ats2jspre_eq_int0_int0(tmp120, 3);
  } // endif
  if(tmp124) {
    setCell(arg0, arg1, true);
  } else {
    setCell(arg0, arg1, false);
  } // endif
  return/*_void*/;
} // end-of-function


function
updateAllGrid()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_updateAllGrid
  updateCopy();
  theClicks2_baconjs_aux_19(0, 0);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_aux_19(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp130
  var tmp131
  var tmp132
  var tmp134
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_theClicks2_baconjs_aux_19
    tmp130 = ats2jspre_gte_int0_int0(arg0, size);
    if(tmp130) {
      // ATSINSmove_void
    } else {
      tmp131 = ats2jspre_gte_int0_int0(arg1, size);
      if(tmp131) {
        tmp132 = ats2jspre_add_int0_int0(arg0, 1);
        // ATStailcalseq_beg
        apy0 = tmp132;
        apy1 = 0;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_theClicks2_baconjs_aux_19
        // ATStailcalseq_end
      } else {
        theClicks2_baconjs_updateGrid_17(arg0, arg1);
        tmp134 = ats2jspre_add_int0_int0(arg1, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = tmp134;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_theClicks2_baconjs_aux_19
        // ATStailcalseq_end
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
theClicks2_baconjs_fix_index_template_20(arg0)
{
//
// knd = 0
  var tmpret135
  var tmp136
  var tmp137
  var tmp138
  var tmp139
  var tmp140
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_fix_index_template_20
  tmp136 = mycheckbox();
  if(tmp136) {
    tmp137 = ats2jspre_gte_int0_int0(arg0, size);
    if(tmp137) {
      tmpret135 = ats2jspre_sub_int0_int0(arg0, size);
    } else {
      tmp138 = ats2jspre_lt_int0_int0(arg0, 0);
      if(tmp138) {
        tmpret135 = ats2jspre_add_int0_int0(size, arg0);
      } else {
        tmpret135 = arg0;
      } // endif
    } // endif
  } else {
    tmp139 = ats2jspre_gte_int0_int0(arg0, size);
    if(tmp139) {
      tmpret135 = ats2jspre_neg_int1(1);
    } else {
      tmp140 = ats2jspre_lt_int0_int0(arg0, 0);
      if(tmp140) {
        tmpret135 = ats2jspre_neg_int1(1);
      } else {
        tmpret135 = arg0;
      } // endif
    } // endif
  } // endif
  return tmpret135;
} // end-of-function


function
applyTemplate(arg0, arg1, arg2, arg3, arg4)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_applyTemplate
  theClicks2_baconjs_aux_22(arg0, arg1, arg2, arg3, arg4, 0, 0);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_aux_22(env0, env1, env2, env3, env4, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp143
  var tmp144
  var tmp145
  var tmp146
  var tmp148
  var tmp149
  var tmp150
  var tmp151
  var tmp152
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_theClicks2_baconjs_aux_22
    tmp143 = ats2jspre_eq_int0_int0(arg0, env1);
    if(tmp143) {
      // ATSINSmove_void
    } else {
      tmp144 = ats2jspre_eq_int0_int0(arg1, env2);
      if(tmp144) {
        tmp145 = ats2jspre_add_int0_int0(arg0, 1);
        // ATStailcalseq_beg
        apy0 = tmp145;
        apy1 = 0;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_theClicks2_baconjs_aux_22
        // ATStailcalseq_end
      } else {
        tmp146 = getTemplateAt(env0, arg0, arg1);
        tmp149 = ats2jspre_add_int0_int0(env3, arg0);
        tmp148 = theClicks2_baconjs_fix_index_template_20(tmp149);
        tmp151 = ats2jspre_add_int0_int0(env4, arg1);
        tmp150 = theClicks2_baconjs_fix_index_template_20(tmp151);
        setCell(tmp148, tmp150, tmp146);
        tmp152 = ats2jspre_add_int0_int0(arg1, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = tmp152;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_theClicks2_baconjs_aux_22
        // ATStailcalseq_end
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
random_grid(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp154
  var tmp155
  var tmp156
  var tmp157
  var tmp158
  var tmp160
  var tmp162
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_random_grid
    tmp154 = ats2jspre_eq_int0_int0(arg0, size);
    if(tmp154) {
      // ATSINSmove_void
    } else {
      tmp155 = ats2jspre_eq_int0_int0(arg1, size);
      if(tmp155) {
        tmp156 = ats2jspre_add_int0_int0(arg0, 1);
        // ATStailcalseq_beg
        apy0 = tmp156;
        apy1 = 0;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_random_grid
        // ATStailcalseq_end
      } else {
        tmp158 = ats2jspre_JSmath_random();
        tmp157 = theClicks2_baconjs_dbl2int_0(tmp158);
        tmp160 = theClicks2_baconjs_int2bool_1(tmp157);
        setCell(arg0, arg1, tmp160);
        updateCopy();
        tmp162 = ats2jspre_add_int0_int0(arg1, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = tmp162;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_random_grid
        // ATStailcalseq_end
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
reset_grid(arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp164
  var tmp165
  var tmp166
  var tmp168
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_reset_grid
    tmp164 = ats2jspre_eq_int0_int0(arg0, size);
    if(tmp164) {
      updateCopy();
    } else {
      tmp165 = ats2jspre_eq_int0_int0(arg1, size);
      if(tmp165) {
        tmp166 = ats2jspre_add_int0_int0(arg0, 1);
        // ATStailcalseq_beg
        apy0 = tmp166;
        apy1 = 0;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_reset_grid
        // ATStailcalseq_end
      } else {
        setCell(arg0, arg1, false);
        tmp168 = ats2jspre_add_int0_int0(arg1, 1);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = tmp168;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_reset_grid
        // ATStailcalseq_end
      } // endif
    } // endif
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
theClicks2_baconjs_build_T_25(arg0, arg1)
{
//
// knd = 0
  var tmp170
  var tmp171
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_build_T_25
  tmp170 = getTemplateRowCount("glider_gun");
  tmp171 = getTemplateColCount("glider_gun");
  applyTemplate("glider_gun", tmp170, tmp171, arg0, arg1);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_build_F_26(arg0, arg1)
{
//
// knd = 0
  var tmp173
  var tmp174
  var tmp175
  var tmp176
  var tmp178
  var tmp179
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_build_F_26
  tmp173 = getTemplateRowCount("glider_gun");
  tmp174 = getTemplateColCount("glider_gun");
  tmp175 = getTemplateRowCount("blocker");
  tmp176 = getTemplateColCount("blocker");
  applyTemplate("glider_gun", tmp173, tmp174, arg0, arg1);
  tmp178 = ats2jspre_add_int0_int0(arg0, 10);
  tmp179 = ats2jspre_add_int0_int0(arg1, 24);
  applyTemplate("blocker", tmp175, tmp176, tmp178, tmp179);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_check_val_27(arg0, arg1, arg2)
{
//
// knd = 0
  var tmp181
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_check_val_27
  tmp181 = ats2jspre_eq_int0_int0(arg0, 1);
  if(tmp181) {
    theClicks2_baconjs_build_T_25(arg1, arg2);
  } else {
    theClicks2_baconjs_build_F_26(arg1, arg2);
  } // endif
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_signalr_28(arg0, arg1)
{
//
// knd = 0
  var tmp183
  var tmp184
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_signalr_28
  tmp183 = getTemplateRowCount("glider_gunr");
  tmp184 = getTemplateColCount("glider_gunr");
  applyTemplate("glider_gunr", tmp183, tmp184, arg0, arg1);
  applyTemplate("glider_gunr", tmp183, tmp184, arg0, arg1);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_signal_29(arg0, arg1)
{
//
// knd = 0
  var tmp187
  var tmp188
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_signal_29
  tmp187 = getTemplateRowCount("glider_gun");
  tmp188 = getTemplateColCount("glider_gun");
  applyTemplate("glider_gun", tmp187, tmp188, arg0, arg1);
  applyTemplate("glider_gun", tmp187, tmp188, arg0, arg1);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_build_and_30()
{
//
// knd = 0
  var tmp191
  var tmp192
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_build_and_30
  tmp191 = get_logicExp_at_i(0);
  tmp192 = get_logicExp_at_i(1);
  theClicks2_baconjs_check_val_27(tmp191, 0, 0);
  theClicks2_baconjs_check_val_27(tmp192, 0, 42);
  theClicks2_baconjs_signalr_28(0, 82);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_build_not_31()
{
//
// knd = 0
  var tmp196
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_build_not_31
  tmp196 = get_logicExp_at_i(0);
  theClicks2_baconjs_check_val_27(tmp196, 0, 0);
  theClicks2_baconjs_signalr_28(0, 42);
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_build_or_32()
{
//
// knd = 0
  var tmp199
  var tmp200
  var tmplab, tmplab_js
//
  // __patsflab_theClicks2_baconjs_build_or_32
  tmp199 = get_logicExp_at_i(0);
  tmp200 = get_logicExp_at_i(1);
  theClicks2_baconjs_signal_29(0, 0);
  theClicks2_baconjs_check_val_27(tmp199, 2, 42);
  theClicks2_baconjs_check_val_27(tmp200, 1, 76);
  theClicks2_baconjs_signalr_28(0, 120);
  return/*_void*/;
} // end-of-function


function
logic_build()
{
//
// knd = 0
  var tmp205
  var tmp206
  var tmp207
  var tmplab, tmplab_js
//
  // __patsflab_logic_build
  tmp205 = getExpType();
  tmp206 = ats2jspre_eq_int0_int0(tmp205, 1);
  if(tmp206) {
    theClicks2_baconjs_build_and_30();
  } else {
    tmp207 = ats2jspre_eq_int0_int0(tmp205, 2);
    if(tmp207) {
      theClicks2_baconjs_build_or_32();
    } else {
      theClicks2_baconjs_build_not_31();
    } // endif
  } // endif
  return/*_void*/;
} // end-of-function

// dynloadflag_minit
var _057_home_057_Wittgenstein_057_Documents_057_ProgL_057_cs520_055_2016_055_fall_055_ra1issa_057_project_057_Cell_056_dats__dynloadflag = 0;

function
_057_home_057_Wittgenstein_057_Documents_057_ProgL_057_cs520_055_2016_055_fall_055_ra1issa_057_project_057_Cell_056_dats__dynload()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // ATSdynload()
  // ATSdynloadflag_sta(_057_home_057_Wittgenstein_057_Documents_057_ProgL_057_cs520_055_2016_055_fall_055_ra1issa_057_project_057_Cell_056_dats__dynloadflag(356))
  if(ATSCKiseqz(_057_home_057_Wittgenstein_057_Documents_057_ProgL_057_cs520_055_2016_055_fall_055_ra1issa_057_project_057_Cell_056_dats__dynloadflag)) {
    _057_home_057_Wittgenstein_057_Documents_057_ProgL_057_cs520_055_2016_055_fall_055_ra1issa_057_project_057_Cell_056_dats__dynloadflag = 1 ; // flag is set
    theClicks2_baconjs_statmp4 = getStreamForId("simOnce");
    theClicks2_baconjs_statmp5 = ats2js_bacon_EStream_map(theClicks2_baconjs_statmp4, theClicks2_baconjs_patsfun_2__closurerize());
    theClicks2_baconjs_statmp7 = getStreamForId("simlStop");
    theClicks2_baconjs_statmp8 = ats2js_bacon_EStream_map(theClicks2_baconjs_statmp7, theClicks2_baconjs_patsfun_3__closurerize());
    theClicks2_baconjs_statmp10 = getStreamForId("simAll");
    theClicks2_baconjs_statmp13 = 0;
    theClicks2_baconjs_statmp12 = ats2js_bacon_EStream_map_method(theClicks2_baconjs_statmp10, theClicks2_baconjs_statmp13);
    theClicks2_baconjs_statmp11 = theClicks2_baconjs_statmp12[0](theClicks2_baconjs_statmp12, theClicks2_baconjs_patsfun_4__closurerize());
    theClicks2_baconjs_statmp15 = getStreamForId("logic");
    theClicks2_baconjs_statmp16 = ats2js_bacon_EStream_map(theClicks2_baconjs_statmp15, theClicks2_baconjs_patsfun_5__closurerize());
    theClicks2_baconjs_statmp18 = getStreamForId("randConfig");
    theClicks2_baconjs_statmp19 = ats2js_bacon_EStream_map(theClicks2_baconjs_statmp18, theClicks2_baconjs_patsfun_6__closurerize());
    theClicks2_baconjs_statmp21 = getStreamForId("resetConfig");
    theClicks2_baconjs_statmp22 = ats2js_bacon_EStream_map(theClicks2_baconjs_statmp21, theClicks2_baconjs_patsfun_7__closurerize());
    theClicks2_baconjs_initStreams_8(0, 0);
    theClicks2_baconjs_statmp48 = ats2js_bacon_EStream_merge2(theClicks2_baconjs_statmp11, theClicks2_baconjs_statmp8);
    theClicks2_baconjs_statmp47 = ats2js_bacon_EStream_scan(theClicks2_baconjs_statmp48, false, theClicks2_baconjs_patsfun_11__closurerize());
    theClicks2_baconjs_statmp50 = ats2js_bacon_EStream_merge2(theClicks2_baconjs_statmp5, theClicks2_baconjs_statmp8);
    theClicks2_baconjs_statmp51 = ats2js_bacon_EStream_merge2(theClicks2_baconjs_statmp50, theClicks2_baconjs_statmp19);
    theClicks2_baconjs_statmp52 = ats2js_bacon_EStream_merge2(theClicks2_baconjs_statmp51, theClicks2_baconjs_statmp16);
    theClicks2_baconjs_statmp53 = ats2js_bacon_Property_sampledBy_estream_cfun(theClicks2_baconjs_statmp47, theClicks2_baconjs_statmp52, theClicks2_baconjs_patsfun_12__closurerize());
    theClicks2_baconjs_statmp56 = ats2js_bacon_Bacon_interval(5, 0);
    theClicks2_baconjs_statmp55 = ats2js_bacon_Property_sampledBy_estream(theClicks2_baconjs_statmp47, theClicks2_baconjs_statmp56);
    theClicks2_baconjs_statmp57 = ats2js_bacon_EStream_merge2(theClicks2_baconjs_statmp52, theClicks2_baconjs_statmp11);
    theClicks2_baconjs_statmp59 = 2;
    theClicks2_baconjs_statmp58 = ats2js_bacon_EStream_toProperty_init(theClicks2_baconjs_statmp57, theClicks2_baconjs_statmp59);
    theClicks2_baconjs_statmp60 = ats2js_bacon_Property_sampledBy_estream_cfun(theClicks2_baconjs_statmp58, theClicks2_baconjs_statmp55, theClicks2_baconjs_patsfun_13__closurerize());
    theClicks2_baconjs_statmp63 = ats2js_bacon_EStream_merge2(theClicks2_baconjs_statmp53, theClicks2_baconjs_statmp60);
    theClicks2_baconjs_statmp62 = ats2js_bacon_EStream_scan(theClicks2_baconjs_statmp63, 0, theClicks2_baconjs_patsfun_14__closurerize());
    theClicks2_baconjs_statmp69 = ats2js_bacon_EStream_scan(theClicks2_baconjs_statmp22, 0, theClicks2_baconjs_patsfun_15__closurerize());
    theCounter = theClicks2_baconjs_statmp62;
    theCounter2 = theClicks2_baconjs_statmp69;
  } // endif
  return/*_void*/;
} // end-of-function


function
theClicks2_baconjs_start()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  _057_home_057_Wittgenstein_057_Documents_057_ProgL_057_cs520_055_2016_055_fall_055_ra1issa_057_project_057_Cell_056_dats__dynload();
  return/*_void*/;
} // end-of-function


/* ATSextcode_beg() */
var size = 0;
var time = 50;
var torus = false;
var steps = 0;
var colors = ['#bf1fcd','#792983','#f58706'];
var grid = [];
var grid_copy = [];
var expression = [];

var streams = []; //where each entry is a stream of clicks per cell


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Check if user wants a toroidal grid
function mycheckbox() {
    return document.getElementById("torus").checked;
}
// Count the number of simulation iterations
function update_steps(reset){
  if(reset == 1){
    steps = 0;
  }else{
    steps = steps + 1;
  }
  $("#counter").text(steps);
}
function rand(){
  return ~~(Math.random()*2) ? true : false;
}
// randomly set a cells color whenever the grid is updated
function rand_color(){
  return colors[Math.floor(Math.random()*3)];
}

// Get the click event for a cell[i][j]
function getStream(i, j) {
  return $("#"+"c"+i+"_"+j).asEventStream("click");
}

// Get a stream per cell
function getStreamForId(str_id){
  return $("#"+str_id).asEventStream("click");
}

// Set a Cell to alive or dead
function setCell(i, j, life) {

  var status = "dead";
  var color = '#f2f2ef';
  if(life){
   status = "alive";
   color = rand_color();
  }
  grid[i][j] = life;
  document.getElementById("c"+i+"_"+j).className = "gridsquare " + status;
  document.getElementById("c"+i+"_"+j).style.backgroundColor = color;
}
// Note that the original grid is updated immediately
// and the copy is the one checked in order to update
function getCell_copy(i, j) {
  if(i == -1 || j == -1){ // consider an out of bound cell dead
    return 0;
  }
  if(grid_copy[i][j]){
    return 1;
  }
  return 0;
}
// Set the grid_copy to grid once the updating is done
function updateCopy() {
  for (var i = 0; i < size; i++) {
    for (var j = 0; j < size; j++) {
      grid_copy[i][j]= grid[i][j];
    }
  }
}

// Flip a cell's status if its clicked
function flipCell(i, j) {
  grid[i][j] = !grid[i][j];

  var color = '#f2f2ef';
  var status = "dead";

  if(grid[i][j]){
    status = "alive";
    color = '#204eee';
  }

  document.getElementById("c"+i+"_"+j).className = "gridsquare " + status;
  document.getElementById("c"+i+"_"+j).style.backgroundColor = color;
}

// Generate a table of size n
function genTable(n) {
    size = n;

    grid = new Array(n);
    grid_copy = new Array(n);

    var width = 28 * n;
    var e = document.getElementById("sim")
    for (var i = 0; i < n; i++) {
        grid[i] = new Array(n);
        grid_copy[i] = new Array(n);

        var row = document.createElement("div");
        row.className = "row";
        row.style.width = "" + width + "px";

        for (var j = 0; j < n; j++) {

            var cell = document.createElement("div");
            cell.className = "gridsquare dead";
            cell.innerHTML = "&nbsp;"
            cell.id = "c"+i+"_"+j;
            row.appendChild(cell);
            grid[i][j] = false;
        }
        e.appendChild(row);
    }
}
function Start(){

  var n = parseInt(document.getElementById("size_n").value);
  genTable(n);

  var _ = theClicks2_baconjs_start();
  for(var i = 0; i < streams.length; i++) { // assign each stream of clicks
      var _ = streams[i].assign($("#ass"), "text");
  }

  var _ = theCounter.assign($("#siass"), "text");
  var _ = theCounter2.assign($("#siass2"), "text");
  $("#gridcontrol").hide();
}
// check if a templates[x][y] i.e. at its cell at its x'th row and y'th col
// is dead or alive.
function getTemplateAt(templateName, x, y) {
  console.log(templateName);
  console.log(x);
  console.log(y);
  return templates[templateName][x][y];
}
// Set the Default option
function resetTemplate() {
  $("#templates").val("default");
}
// Return the user selected Template
function getSelectedTemplate() {
  return $("#templates").val();
}
// Count the number of rows in the template
function getTemplateRowCount(name) {
  return templates[name].length;
}
// Count the number of columns in the template
function getTemplateColCount(name) {
  return templates[name][0].length;
}
function getExpType(){
  var t = $("#exp").val()
  if (t == "and"){
    return 1;
  }else if (t == "or"){
    return 2;
  }
  return 3;
}

function get_logicExp_at_i(i){
  if(expression == ""){
   expression = document.getElementById("expression").value;
  }
  if(expression.charAt(i) == "T"){
    return 1;
  }
  return 0;
}

/* ATSextcode_end() */

/* ****** ****** */

/* end-of-compilation-unit */
